- name: cloud-1
  hosts: cloud1hosts
  vars:
    project_dir: /home/cloud-1
    secrets_dir: "{{ project_dir }}/secrets" 

  tasks:
  
    # =========== SETUP ========== #
    
    - name: Check known_hosts for {{ inventory_hostname }}
      local_action: shell ssh-keygen -F {{ inventory_hostname }}
      register: has_entry_in_known_hosts_file
      changed_when: false
      ignore_errors: true
    - name: Ignore host key for {{ inventory_hostname }} on first run
      when: has_entry_in_known_hosts_file.rc == 1
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    - name: Delayed gathering of facts
      setup:
  
    # =========== ENVIRONMENT ========== #
    
    # Operating System: Ubuntu
    - name: Check that OS is Ubuntu-based
      assert:
        that: ansible_distribution == "Ubuntu"
        fail_msg: "This playbook requires a Ubuntu-based OS"
        success_msg: "Ubuntu OS Detected. Proceeding with playbook..."

    # Python 3 installed
    - name: Check if Python 3 is installed
      raw: python3 --version
      register: python_check
      ignore_errors: yes
    - name: Install Python 3 if missing
      when: python_check.rc != 0
      raw: apt-get update && apt-get install -y python3

    # apt module dependencies installed
    - name: Install apt module dependencies - python3-apt, aptitude
      raw: apt-get update && apt-get install -y python3-apt aptitude

    # UFW enabled
    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present
        update_cache: yes       # ensure package list is up to date before installation
    - name: Set UFW default policy to allow outgoing and deny incoming
      ufw:
        state: enabled          # turns firewall on
        policy: deny            # sets default rule for incoming traffic to `deny`
    - name: Allow SSH through UFW
      ufw:
        rule: allow             # opens criteria-matching traffic
        name: OpenSSH
    
    # =========== DOCKER ========== #
    # reference: https://docs.docker.com/engine/install/ubuntu/#uninstall-docker-engine

    # Check Docker
    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: yes

    # Install Docker
    - name: Install Docker
      block:

        # Remove conflicting packages
        - name: Remove any conflicting Docker-related packages
          raw: |
            for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do
              apt-get remove -y $pkg || true
            done
          ignore_errors: yes

        # Remove old repo file
        - name: Remove old Docker repo file if exists
          file:
            path: /etc/apt/sources.list.d/docker.list
            state: absent

        # Install dependencies
        - name: Install dependencies
          apt: 
            pkg:
              - ca-certificates
            state: present

        # Get GPG key
        - name: Ensure /etc/apt/keyrings directory exists with correct permissions
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'
            owner: root
            group: root
        - name: Download Docker's official GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: '0644'

        # Create Docker repository
        - name: Get Architecture
          set_fact:
            docker_arch: >-
              {% if ansible_architecture == "x86_64" %}amd64{% elif ansible_architecture == "aarch64" %}arm64{% else %}{{ ansible_architecture }}{% endif %}
        - name: Get Repository Name
          set_fact:
            docker_repo: "deb [arch={{ docker_arch }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        - name: Create Docker Repository
          apt_repository:
            # {{ ansible_architecture }} = amd64 / arm64
            # {{ ansible_lsb.codename }} = OS codename (e.g. focal or bullseye)
            repo: "{{ docker_repo }}"
            state: present
            filename: docker
            update_cache: yes

        # Install Docker
        - name: Install Docker
          apt:
            pkg:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

      when: docker_check.failed

    # Launch Docker
    - name: Launch Docker
      systemd:
        name: docker
        state: started      # starts Docker right now
        enabled: yes        # ensures Docker starts on boot

    # =========== APPLICATION ========== #

    # Create project directory
    - name: Ensure cloud-1 directory exists
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    # Copy files to server
    - name: Copy docker service files
      synchronize:
        src: ../services
        dest: "{{ project_dir }}"
      delegate_to: localhost
    - name: Copy other files
      copy:
        src: "{{ playbook_dir }}/../{{ item }}"
        dest: "{{ project_dir }}"
      loop:
        - ".env"
        - "docker-compose.yml"

    # Create secrets
    - name: Ensure secrets directory exists
      file:
        path: "{{ secrets_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0700'
    # Check if secrets exists
    - name: Check if folder is empty before proceeding
      find:
        paths: "{{ secrets_dir }}"
      register: files_found
    - name: Create secrets if folder empty
      block:
        # Generate private key
        - name: Generate private key for SSL
          community.crypto.openssl_privatekey:
            path: "{{ secrets_dir }}/server.key"
            size: 2048
            type: RSA
        # Generate self-signed certificate
        - name: Generate self-signed certificate
          community.crypto.x509_certificate:
            path: "{{ secrets_dir }}/server.crt"
            privatekey_path: "{{ secrets_dir }}/server.key"
            provider: selfsigned
        # Generate passwords
        - name: Generate passwords
          shell: "openssl rand -hex 32 > {{ secrets_dir }}/{{ item }}"
          args:
            creates: "{{ secrets_dir }}/{{ item }}"
          loop:
            - db-password.txt
            - db-root-password.txt
            - wp-admin-password.txt
      when: files_found.examined == 0
            
    # Launch app
    - name: Launch cloud-1 site
      community.docker.docker_compose_v2: # ansible-galaxy collection install community.docker
        project_src: "{{ project_dir }}"
        state: present
        build: always
        recreate: auto
        remove_orphans: yes

    # =========== CHECKS ========== #
    
    - name: Curl site (ignore SSL cert)
      uri:
        url: "https://{{ item.0 }}{{ item.1 }}"
        method: GET
        validate_certs: no
      register: curl_result
      failed_when: curl_result.status is defined and curl_result.status != 200
      loop: "{{ groups['cloud1hosts'] | product(['', '/phpmyadmin']) | list }}"