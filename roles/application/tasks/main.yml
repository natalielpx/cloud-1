# ROLE: Application
# Creates and sets up project directory and files
# Creates secrets (if missing)
# Launches application

# Create project directory
- name: Ensure cloud-1 directory exists
  file:
    path: "{{ project_dir }}"
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'

# Copy files to server
- name: Copy docker service files
  become: no      # so that ansible doesn't try to sudo in localhost
  synchronize:
    src: services
    dest: "{{ project_dir }}"
    rsync_path: "sudo rsync"
    checksum: yes
  delegate_to: localhost
- name: Copy .env file
  copy:
    src: ".env.{{ inventory_hostname }}"
    dest: "{{ project_dir }}/.env"
- name: Copy docker-compose file
  copy:
    src: "docker-compose.yml"
    dest: "{{ project_dir }}"

# Create secrets directory
- name: Ensure secrets directory exists
  file:
    path: "{{ secrets_dir }}"
    state: directory
    owner: www-data
    group: www-data
    mode: '0700'
# Check if secrets exists
- name: Check if folder is empty before proceeding
  find:
    paths: "{{ secrets_dir }}"
  register: files_found
# Generate secrets
- name: Create secrets if folder empty
  when: files_found.examined == 0
  block:
    # Generate private key
    - name: Generate private key for SSL
      community.crypto.openssl_privatekey:
        path: "{{ secrets_dir }}/server.key"
        size: 2048
        type: RSA
    # Generate self-signed certificate
    - name: Generate self-signed certificate
      community.crypto.x509_certificate:
        path: "{{ secrets_dir }}/server.crt"
        privatekey_path: "{{ secrets_dir }}/server.key"
        provider: selfsigned
    # Generate passwords
    - name: Generate passwords
      shell: "openssl rand -hex 32 > {{ secrets_dir }}/{{ item }}"
      args:
        creates: "{{ secrets_dir }}/{{ item }}"
      loop:
        - db-password.txt
        - db-root-password.txt
        - wp-admin-password.txt

# Launch app
- name: Launch cloud-1 site
  community.docker.docker_compose_v2:     # ansible-galaxy collection install community.docker
    project_src: "{{ project_dir }}"
    state: present                        # runs application if is not running
    build: always                         # builds images if files are changed
    recreate: auto                        # recreates containers if images are changed
    remove_orphans: yes                   # removes containers not defined by docker-compose.yml